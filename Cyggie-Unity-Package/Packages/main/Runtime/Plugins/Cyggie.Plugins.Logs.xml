<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cyggie.Plugins.Logs</name>
    </assembly>
    <members>
        <member name="T:Cyggie.Plugins.Logs.DebugLogEventArgs">
            <summary>
            Event arguments for a log of type <see cref="F:Cyggie.Plugins.Logs.LogTypes.Debug"/>
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.DebugLogEventArgs.Type">
            <inheritdoc/>
        </member>
        <member name="M:Cyggie.Plugins.Logs.DebugLogEventArgs.Send">
            <inheritdoc/>
        </member>
        <member name="T:Cyggie.Plugins.Logs.ErrorLogEventArgs">
            <summary>
            Event arguments for a log of type <see cref="F:Cyggie.Plugins.Logs.LogTypes.Error"/>
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.ErrorLogEventArgs.Type">
            <inheritdoc/>
        </member>
        <member name="M:Cyggie.Plugins.Logs.ErrorLogEventArgs.Send">
            <inheritdoc/>
        </member>
        <member name="T:Cyggie.Plugins.Logs.LogEventArgs">
            <summary>
            Event arguments for a log
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.LogEventArgs.Type">
            <summary>
            Type of log
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.LogEventArgs.FullLog">
            <summary>
            The full log that's displayed in the console based on the <see cref="T:Cyggie.Plugins.Logs.LogProfile"/> that was set
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.LogEventArgs.Log">
            <summary>
            The log message that was inputted
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.LogEventArgs.Tag">
            <summary>
            Tag that was inputted with the log <br/>
            This can be used for Class name, method name, etc.
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.LogEventArgs.Timestamp">
            <summary>
            The timestamp that the log was sent
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.LogEventArgs.StackTrace">
            <summary>
            The log's stack trace
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.LogEventArgs.Context">
            <summary>
            The object's context
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Logs.LogEventArgs.Send">
            <summary>
            Send the log
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Logs.WarningLogEventArgs">
            <summary>
            Event arguments for a log of type <see cref="F:Cyggie.Plugins.Logs.LogTypes.Warning"/>
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Logs.WarningLogEventArgs.Type">
            <inheritdoc/>
        </member>
        <member name="M:Cyggie.Plugins.Logs.WarningLogEventArgs.Send">
            <inheritdoc/>
        </member>
        <member name="T:Cyggie.Plugins.Logs.Log">
            <summary>
            Static class to manage Logs
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Logs.Log.LogEvent">
            <summary>
            Event called when there's a new log
            </summary>
            <param name="args">Event args object</param>
        </member>
        <member name="F:Cyggie.Plugins.Logs.Log.OnLogEvent">
            <summary>
            Event called when there's a new log
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Logs.Log.DebugLogEvent">
            <summary>
            Event called when there's a new Debug log
            </summary>
            <param name="args">Event args object</param>
        </member>
        <member name="F:Cyggie.Plugins.Logs.Log.OnDebugEvent">
            <summary>
            Event called when there's a new Debug log
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Logs.Log.WarningLogEvent">
            <summary>
            Event called when there's a new Warning log
            </summary>
            <param name="args">Event args object</param>
        </member>
        <member name="F:Cyggie.Plugins.Logs.Log.OnWarningEvent">
            <summary>
            Event called when there's a new Warning log
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Logs.Log.ErrorLogEvent">
            <summary>
            Event called when there's a new Error log
            </summary>
            <param name="args">Event args object</param>
        </member>
        <member name="F:Cyggie.Plugins.Logs.Log.OnErrorEvent">
            <summary>
            Event called when there's a new Error log
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.Debug(System.Object,System.String,UnityEngine.Object)">
            <summary>
            Send a debug message <br/>
            If the current profile does not include Debugs, this will be ignored <br/>
            You can manage profiles in the toolbar at Cyggie/Package Configurations <br/>
            Format: Tag | [Timestamp] Message StackTrace
            </summary>
            <param name="message">Message to log</param>
            <param name="tag">Tag to add</param>
            <param name="context">The Object that this log is associated to, clicking on this log will select the Object</param>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.Warning(System.Object,System.String,UnityEngine.Object)">
            <summary>
            Send a warning message <br/>
            If the current profile does not include Warnings, this will be ignored <br/>
            You can manage profiles in the toolbar at Cyggie/Package Configurations
            Format: Tag | [Timestamp] Message StackTrace
            </summary>
            <param name="message">Message to log</param>
            <param name="tag">Tag to add</param>
            <param name="context">The Object that this log is associated to, clicking on this log will select the Object</param>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.Error(System.Object,System.String,UnityEngine.Object)">
            <summary>
            Send a error message <br/>
            If the current profile does not include Errors, this will be ignored <br/>
            You can manage profiles in the toolbar at Cyggie/Package Configurations
            Format: Tag | [Timestamp] Message StackTrace
            </summary>
            <param name="message">Message to log</param>
            <param name="tag">Tag to add</param>
            <param name="context">The Object that this log is associated to, clicking on this log will select the Object</param>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.SetTypes(Cyggie.Plugins.Logs.LogTypes)">
            <summary>
            Set the profile's log types during runtime <br/>
            This will not update the profile's Serialized Object (if any) <br/>
            Changes only affect the current run
            </summary>
            <param name="types">Filter types (flags)</param>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.Enable">
            <summary>
            Enable logs
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.Disable">
            <summary>
            Disable logs
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.SetProfile(Cyggie.Plugins.Logs.LogProfile)">
            <summary>
            Set the current profile based on the <see cref="P:UnityEngine.Application.platform"/>
            </summary>
            <param name="profile">Platform's profile</param>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Log.BuildLog(System.Object,System.String)">
            <summary>
            Build the complete log
            </summary>
            <param name="message">The origianl message</param>
            <param name="tag">The input tag</param>
            <returns></returns>
        </member>
        <member name="T:Cyggie.Plugins.Logs.LogProfile">
            <summary>
            Class that holds log settings for a <see cref="T:UnityEngine.RuntimePlatform"/>
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Logs.LogProfile.Name">
            <summary>
            Array's display name in Inspector
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Logs.LogTypes">
            <summary>
            The supported log types
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Logs.LogTypes.None">
            <summary>
            None enabled
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Logs.LogTypes.Debug">
            <summary>
            <see cref="M:UnityEngine.Debug.Log(System.Object)"/> enabled
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Logs.LogTypes.Warning">
            <summary>
            <see cref="M:UnityEngine.Debug.LogWarning(System.Object)"/> enabled
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Logs.LogTypes.Error">
            <summary>
            <see cref="M:UnityEngine.Debug.LogError(System.Object)"/> enabled
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Logs.Utils.LogTypesExtensions">
            <summary>
            Extension class for <see cref="T:Cyggie.Plugins.Logs.LogTypes"/>
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Logs.Utils.LogTypesExtensions.ToUnityType(Cyggie.Plugins.Logs.LogTypes)">
            <summary>
            Convert <see cref="T:Cyggie.Plugins.Logs.LogTypes"/> to the Unity equivalent
            </summary>
            <param name="logTypes">Log type to convert</param>
            <returns>Unity log type</returns>
        </member>
    </members>
</doc>
