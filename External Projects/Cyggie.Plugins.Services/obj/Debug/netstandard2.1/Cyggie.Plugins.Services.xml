<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cyggie.Plugins.Services</name>
    </assembly>
    <members>
        <member name="T:Cyggie.Plugins.Services.Interfaces.IService">
            <summary>
            Interface for a singular service (singleton instance)
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Services.Interfaces.IService.ServiceManager">
            <summary>
            Reference to the service manager that manages all services
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Services.Interfaces.IService.Priority">
            <summary>
            Priority of initialization (1 being higher than 0)
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Services.Interfaces.IService.CreateOnInitialize">
            <summary>
            Whether this service should be created when <see cref="M:Cyggie.Plugins.Services.Interfaces.IServiceManager.Initialize(System.Type[])"/> is called
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Interfaces.IService.Initialize(Cyggie.Plugins.Services.Interfaces.IServiceManager)">
            <summary>
            Initialize the service
            </summary>
            <param name="manager">Reference to the service manager that initializes and creates this service</param>
        </member>
        <member name="M:Cyggie.Plugins.Services.Interfaces.IService.OnAllServicesInitialized">
            <summary>
            Called when all services have been initialized
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Services.Interfaces.IServiceConfiguration">
            <summary>
            Interface for a service configuration to a service
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Services.Interfaces.IServiceManager">
            <summary>
            Interface of a service manager that initializes and manages all services
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Services.Interfaces.IServiceManager.OnServicesInitializedEvent">
            <summary>
            Delegate event for all services being initialized
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Services.Interfaces.IServiceManager.OnServicesInitialized">
            <summary>
            Event called when all services have been initialized
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Interfaces.IServiceManager.Initialize(System.Type[])">
            <summary>
            Create and initialize an array of services at the start of the application
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Services.Interfaces.IServiceWithConfiguration">
            <summary>
            Interface for a service with configuration
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Services.Interfaces.IServiceWithConfiguration.ConfigurationType">
            <summary>
            Type of the configuration
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Interfaces.IServiceWithConfiguration.SetConfiguration``1(``0)">
            <summary>
            Set the configuration for the service
            </summary>
            <typeparam name="T">Configuration type</typeparam>
        </member>
        <member name="T:Cyggie.Plugins.Services.Models.Service">
            <summary>
            Service (singleton) without a configuration
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Services.Models.Service.ServiceManager">
            <inheritdoc/>
        </member>
        <member name="P:Cyggie.Plugins.Services.Models.Service.Priority">
            <summary>
            The order of priority in which the service is initialized (by default 0) <br/>
            Higher value means this service will be initialized before other services.
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Services.Models.Service.CreateOnInitialize">
            <inheritdoc/>
        </member>
        <member name="F:Cyggie.Plugins.Services.Models.Service._initialized">
            <summary>
            Whether the service has been initialized or not yet
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.Service.Initialize(Cyggie.Plugins.Services.Interfaces.IServiceManager)">
            <inheritdoc/>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.Service.OnInitialized">
            <summary>
            Called right after the service is initialized
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.Service.OnAllServicesInitialized">
            <inheritdoc/>
        </member>
        <member name="T:Cyggie.Plugins.Services.Models.Service`1">
            <summary>
            Service (singleton) with configuration of type <typeparamref name="T"/> 
            </summary>
            <typeparam name="T">Service configuration type</typeparam>
        </member>
        <member name="P:Cyggie.Plugins.Services.Models.Service`1.Configuration">
            <summary>
            Configuration associated to object
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.Services.Models.Service`1.ConfigurationType">
            <inheritdoc/>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.Service`1.SetConfiguration``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.Service`1.Initialize(Cyggie.Plugins.Services.Interfaces.IServiceManager)">
            <inheritdoc/>
        </member>
        <member name="T:Cyggie.Plugins.Services.Models.ServiceConfiguration">
            <summary>
            Service configuration for a service type of <see cref="T:Cyggie.Plugins.Services.Interfaces.IService"/>
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.Services.Models.ServiceManager">
            <summary>
            Service manager class (singleton for all singletons)
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Services.Models.ServiceManager.Services">
            <summary>
            List of active services
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.Services.Models.ServiceManager.GenericServiceType">
            <summary>
            Generic <see cref="T:Cyggie.Plugins.Services.Interfaces.IService"/> type used by the Service Manager to assign configuration when creating services
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.ServiceManager.#ctor(System.Boolean)">
            <summary>
            Create a new service manager object
            </summary>
            <param name="initialize">Whether the service manager should immediately initialize</param>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.ServiceManager.Initialize">
            <summary>
            Initialize the service manager with all services and service configurations in the assembly
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.ServiceManager.Initialize(System.Type[])">
            <summary>
            Initialize the service manager with all service configurations and specific list of services
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.ServiceManager.Initialize(System.Collections.Generic.IEnumerable{Cyggie.Plugins.Services.Interfaces.IServiceConfiguration},System.Type[])">
            <summary>
            Initialize the service manager with a specific list of services and service configurations
            </summary>
            <param name="configs">List of configurations to use</param>
            <param name="serviceTypes">List of services to create</param>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.ServiceManager.Create(System.Type)">
            <summary>
            Create a service of type <see cref="T:Cyggie.Plugins.Services.Interfaces.IService"/>
            </summary>
            <param name="serviceType">Type that implements <see cref="T:Cyggie.Plugins.Services.Interfaces.IService"/></param>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.ServiceManager.Get``1(System.Boolean)">
            <summary>
            Get a service from the service manager <br/>
            Will automatically create it if not found
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="isAssignableFrom">When true, it checks whether the service is assignable from <typeparamref name="T"/></param>
            <returns>Service (null if not found)</returns>
        </member>
        <member name="M:Cyggie.Plugins.Services.Models.ServiceManager.TryGet``1(``0@,System.Boolean)">
            <summary>
            Try get a service from the service manager
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="service">Output service (null if not found)</param>
            <param name="isAssignableFrom">When true, it checks whether the service is assignable from <typeparamref name="T"/></param>
            <returns>Found?</returns>
        </member>
        <member name="T:Cyggie.Plugins.Services.Utils.Extensions.ServiceExtensions">
            <summary>
            Class for extension methods related to Services
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.Services.Utils.Extensions.ServiceExtensions.GetConfigurationType``1(Cyggie.Plugins.Services.Models.Service{``0})">
            <summary>
            Get the service configuration type from a <see cref="T:Cyggie.Plugins.Services.Models.Service`1"/>
            </summary>
            <typeparam name="T">Service configuration type</typeparam>
            <param name="service">Service with configuration</param>
            <returns></returns>
        </member>
    </members>
</doc>
