<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cyggie.Plugins.MySQL</name>
    </assembly>
    <members>
        <member name="T:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject">
            <summary>
            Class for a MySQL table's object model <br/>
            The fields are assigned automatically based on the field/property names and table columns (using JSON conversion with the Newtonsoft Json library)<br/>
            <br/>
            <code>
            Example table
            field1 | field2
               1      test
               
            Example class fields/properties
            public int Field1;
            public string Field2 { get; set; }
            </code>
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject.TableName">
            <summary>
            Table name for this type <br/>
            Use <see cref="T:Cyggie.Plugins.MySQL.Attributes.MySQLTableNameAttribute"/> to assign this value
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject.OnObjectCreated">
            <summary>
            Called when the object is created
            </summary>
        </member>
        <member name="T:Cyggie.Plugins.MySQL.Attributes.MySQLTableNameAttribute">
            <summary>
            Attribute to preload a <see cref="T:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject"/> when the database is connected <br/>
            Preloaded tables are added to the pool, when reading from them, it won't query the database and simply retrieve <br/>
            By this nature, they should be read-only and not be written to. <br/>
            If the data somehow changes, it won't be reflected in the pool and the pool can't be updated unless the database connection is re-established
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.MySQL.Attributes.MySQLTableNameAttribute.TableName">
            <summary>
            MySQL table name <br/>
            Defaults to the class name
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Attributes.MySQLTableNameAttribute.#ctor(System.String)">
            <summary>
            Attribute to preload all the table data when the database is connected
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="T:Cyggie.Plugins.MySQL.Attributes.MySQLTablePreloadAttribute">
            <summary>
            Attribute to preload a <see cref="T:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject"/> when the database is connected <br/>
            Preloaded tables are added to the pool, when reading from them, it won't query the database and simply retrieve <br/>
            By this nature, they should be read-only and not be written to. <br/>
            If the data somehow changes, it won't be reflected in the pool and the pool can't be updated unless the database connection is re-established
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.MySQL.Attributes.MySQLTablePreloadAttribute.Priority">
            <summary>
            Order of priority, higher priority will be read and initialized first
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.MySQL.Attributes.MySQLTablePreloadAttribute.DatabaseName">
            <summary>
            Filter to only preload this object for a specific database name
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Attributes.MySQLTablePreloadAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Attribute to preload all the table data when the database is connected
            </summary>
            <param name="priority">Order of priority, higher priority will be read and initialized first</param>
            <param name="databaseName">Filter to only preload this object for a specific database name</param>
        </member>
        <member name="T:Cyggie.Plugins.MySQL.Services.MySQLService">
            <summary>
            Service for anything related to MySQL
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.MySQL.Services.MySQLService._pool">
            <summary>
            Pool created from <see cref="T:Cyggie.Plugins.MySQL.Attributes.MySQLTablePreloadAttribute"/>s only
            </summary>
        </member>
        <member name="F:Cyggie.Plugins.MySQL.Services.MySQLService.OnConnected">
            <summary>
            Action called when a databse connection is established
            </summary>
        </member>
        <member name="P:Cyggie.Plugins.MySQL.Services.MySQLService.IsReady">
            <summary>
            Whether a connection is established and ready for queries
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Initialize(Cyggie.Plugins.Services.Interfaces.IServiceManager)">
            <inheritdoc/>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Connect(System.String,System.String,System.String,System.String)">
            <summary>
            Connect to the database constructing the connection string using the provided arguments
            </summary>
            <param name="server">Server address</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="database">Database to connect to</param>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Connect(MySqlConnector.MySqlConnectionStringBuilder)">
            <summary>
            Connect to the database using the provided string builder <paramref name="builder"/>
            </summary>
            <param name="builder">Connection string builder</param>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Disconnect">
            <summary>
            Disconnect from the currently connected database
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.CreateCommand(System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Create a MySQL Command with <paramref name="parameters"/>
            </summary>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>MySqlCommand object (null if connection is not established)</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Execute(System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Execute an sql query (such as UPDATE, INSERT, DELETE, etc.)
            </summary>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Execute(MySqlConnector.MySqlCommand)">
            <summary>
            Execute a <paramref name="command"/> (such as UPDATE, INSERT, DELETE, etc.)
            </summary>
            <param name="command">Command to execute</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirst``1(System.Func{``0,System.Boolean})">
            <summary>
            Read the first element from the objects found in the pool
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <param name="predicate">Predicate applied to the read</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirst``1(System.String,System.Func{``0,System.Boolean},MySqlConnector.MySqlParameter[])">
            <summary>
            Read the first element from the objects found
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <param name="commandText">The command's query text</param>
            <param name="predicate">Predicate applied to the read</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirst``1(MySqlConnector.MySqlCommand,System.Func{``0,System.Boolean})">
            <summary>
            Read the first element from the objects found
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <param name="command">Command to execute a read (SELECT)</param>
            <param name="predicate">Predicate applied to the read</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Read``1">
            <summary>
            Read from the pool all objects of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <returns>IEnumerable of objects</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Read``1(System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Read a table with an sql query 
            </summary>
            <typeparam name="T">Object type to read</typeparam>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>IEnumerable of objects</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Read``1(MySqlConnector.MySqlCommand)">
            <summary>
            Read a table with <paramref name="command"/>
            </summary>
            <typeparam name="T">Object type to read</typeparam>
            <param name="command">Command to execute a read (SELECT)</param>
            <returns>IEnumerable of object of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirst(System.Type)">
            <summary>
            Read the first element from the objects found in the pool
            </summary>
            <param name="type">Type of objects to retrieve</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirst(System.Type,System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Read the first element from the objects found
            </summary>
            <param name="type">Type of objects to retrieve</param>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirst(System.Type,MySqlConnector.MySqlCommand)">
            <summary>
            Read the first element from the objects found
            </summary>
            <param name="type">Type of objects to retrieve</param>
            <param name="command">Command to execute a read (SELECT)</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Read(System.Type)">
            <summary>
            Read from the pool all objects of type <paramref name="type"/>
            </summary>
            <param name="type">Type of objects to retrieve</param>
            <returns>IEnumerable of objects</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Read(System.Type,System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Read a table with an sql query 
            </summary>
            <param name="type">Object type to read (must inherit from <see cref="T:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject"/> and not be abstract</param>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>IEnumerable of objects</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Read(System.Type,MySqlConnector.MySqlCommand)">
            <summary>
            Read a table with <paramref name="command"/>
            </summary>
            <param name="type">Object type to read (must inherit from <see cref="T:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject"/> and not be abstract</param>
            <param name="command">Command to execute a read (SELECT)</param>
            <returns>IEnumerable of object of <paramref name="type"/></returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ConnectAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Connect asynchronously to the database constructing the connection string using the provided arguments
            </summary>
            <param name="server">Server address</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="database">Database to connect to</param>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ConnectAsync(MySqlConnector.MySqlConnectionStringBuilder)">
            <summary>
            Connect asynchronously to the database using the provided string builder <paramref name="builder"/>
            </summary>
            <param name="builder">Connection string builder</param>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.DisconnectAsync">
            <summary>
            Disconnect asynchronously from the currently connected database
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ExecuteAsync(System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Execute asynchronously an sql query (such as UPDATE, INSERT, DELETE, etc.)
            </summary>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ExecuteAsync(MySqlConnector.MySqlCommand)">
            <summary>
            Execute asynchronously a <paramref name="command"/> (such as UPDATE, INSERT, DELETE, etc.)
            </summary>
            <param name="command">Command to execute</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirstAsync``1(System.String,System.Func{``0,System.Boolean},MySqlConnector.MySqlParameter[])">
            <summary>
            Read the first element from the objects found
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <param name="commandText">The command's query text</param>
            <param name="predicate">Predicate applied to the read</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirstAsync``1(MySqlConnector.MySqlCommand,System.Func{``0,System.Boolean})">
            <summary>
            Read the first element from the objects found
            </summary>
            <typeparam name="T">Type of objects to retrieve</typeparam>
            <param name="command">Command to execute a read (SELECT)</param>
            <param name="predicate">Predicate applied to the read</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadAsync``1(System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Read asynchronously a table with an sql query 
            </summary>
            <typeparam name="T">Object type to read</typeparam>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>IEnumerable of objects</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadAsync``1(MySqlConnector.MySqlCommand)">
            <summary>
            Read asynchronously a table with <paramref name="command"/>
            </summary>
            <typeparam name="T">Object type to read</typeparam>
            <param name="command">Command to execute a read (SELECT)</param>
            <returns></returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirstAsync(System.Type,System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Read the first element from the objects found
            </summary>
            <param name="type">Type of objects to retrieve</param>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadFirstAsync(System.Type,MySqlConnector.MySqlCommand)">
            <summary>
            Read the first element from the objects found
            </summary>
            <param name="type">Type of objects to retrieve</param>
            <param name="command">Command to execute a read (SELECT)</param>
            <returns>First element of query</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadAsync(System.Type,System.String,MySqlConnector.MySqlParameter[])">
            <summary>
            Read asynchronously a table with an sql query 
            </summary>
            <param name="type">Object type to read (must inherit from <see cref="T:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject"/> and not be abstract</param>
            <param name="commandText">The command's query text</param>
            <param name="parameters">Parameters to be added to the command</param>
            <returns>IEnumerable of objects</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.ReadAsync(System.Type,MySqlConnector.MySqlCommand)">
            <summary>
            Read asynchronously a table with <paramref name="command"/>
            </summary>
            <param name="type">Object type to read (must inherit from <see cref="T:Cyggie.Plugins.MySQL.Abstract.MySQLTableObject"/> and not be abstract</param>
            <param name="command">Command to execute a read (SELECT)</param>
            <returns>IEnumerable of object of <paramref name="type"/></returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Services.MySQLService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Cyggie.Plugins.MySQL.Utils.Helpers.MySQLTableHelper">
            <summary>
            Helper class to manage MySQLTable
            </summary>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Utils.Helpers.MySQLTableHelper.GetTableName``1">
            <summary>
            Get the table name for type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type to get the table name for</typeparam>
            <returns>Table name (type name if not found)</returns>
        </member>
        <member name="M:Cyggie.Plugins.MySQL.Utils.Helpers.MySQLTableHelper.GetTableName(System.Type)">
            <summary>
            Get the table name for <paramref name="type"/>
            </summary>
            <param name="type">Type to get the table name for</param>
            <returns>Table name (type name if not found)</returns>
        </member>
    </members>
</doc>
